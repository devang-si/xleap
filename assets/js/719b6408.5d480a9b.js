"use strict";(self.webpackChunkxleap_docs=self.webpackChunkxleap_docs||[]).push([[328],{8842:(t,e,s)=>{s.r(e),s.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>p});var n=s(4848),i=s(8453);const a={sidebar_position:1},o="Typescript/Javascript",r={id:"tutorial-basics/using-js-api",title:"Typescript/Javascript",description:"1. go to account settings and create an API Key for CLI&nbsp; open",source:"@site/docs/tutorial-basics/using-js-api.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/using-js-api",permalink:"/docs/tutorial-basics/using-js-api",draft:!1,unlisted:!1,editUrl:"https://github.com/xleap-ai/xleap/tree/master/docs/docs/tutorial-basics/using-js-api.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/docs/category/getting-started"},next:{title:"xleap's python sdk",permalink:"/docs/tutorial-basics/create-a-document"}},c={},p=[{value:"Setup using typescript/javascript",id:"setup-using-typescriptjavascript",level:2}];function l(t){const e={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",pre:"pre",...(0,i.R)(),...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:"typescriptjavascript",children:"Typescript/Javascript"}),"\n",(0,n.jsxs)(e.ol,{children:["\n",(0,n.jsxs)(e.li,{children:["go to account settings and create an API Key for CLI\xa0 ",(0,n.jsx)(e.a,{href:"http://google.com",children:"open"})]}),"\n",(0,n.jsx)(e.li,{children:"copy the api key somewhere safe, it will be required in subsequent step"}),"\n",(0,n.jsx)(e.li,{children:"start sending data using one of the following methods"}),"\n"]}),"\n",(0,n.jsx)(e.h2,{id:"setup-using-typescriptjavascript",children:"Setup using typescript/javascript"}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-tsx",metastring:'title="setup.ts"',children:"const BASE_URL = 'https://api.xleaplabs.com';\nconst API_KEY = '<********* private key from dashboard>'; // should be private\n\nconst response = await fetch(`${BASE_URL}/v1/api/data`, {\n  method: 'POST',\n  headers: {\n    'Authorization': `API_KEY ${API_KEY}`,\n    'content-type': 'application/json',\n  },\n  body: JSON.stringify({\n    question: '<Your question or prompt template with {context_var}>',\n    answer: '<llm response as text or stringified json>',\n    contexts: ['<array of strings sent to the llm model as key value pair>', 'context_var: this is sample context'],\n    ground_truths: [],\n    tags: { key: 'value' },\n  }),\n});\n\nconsole.log(response);\n"})})]})}function u(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(l,{...t})}):l(t)}},8453:(t,e,s)=>{s.d(e,{R:()=>o,x:()=>r});var n=s(6540);const i={},a=n.createContext(i);function o(t){const e=n.useContext(a);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function r(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:o(t.components),n.createElement(a.Provider,{value:e},t.children)}}}]);